/*
 * This file is generated by jOOQ.
*/
package com.platform.chorus.jooq.tables;


import com.platform.chorus.jooq.Keys;
import com.platform.chorus.jooq.Public;
import com.platform.chorus.jooq.tables.records.ValueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Value extends TableImpl<ValueRecord> {

    private static final long serialVersionUID = -1346967407;

    /**
     * The reference instance of <code>public.value</code>
     */
    public static final Value VALUE = new Value();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ValueRecord> getRecordType() {
        return ValueRecord.class;
    }

    /**
     * The column <code>public.value.id</code>.
     */
    public final TableField<ValueRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('value_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.value.owner</code>.
     */
    public final TableField<ValueRecord, Integer> OWNER = createField("owner", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.value.name</code>.
     */
    public final TableField<ValueRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.value.type</code>.
     */
    public final TableField<ValueRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.value.value</code>.
     */
    public final TableField<ValueRecord, String> VALUE_ = createField("value", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.value</code> table reference
     */
    public Value() {
        this(DSL.name("value"), null);
    }

    /**
     * Create an aliased <code>public.value</code> table reference
     */
    public Value(String alias) {
        this(DSL.name(alias), VALUE);
    }

    /**
     * Create an aliased <code>public.value</code> table reference
     */
    public Value(Name alias) {
        this(alias, VALUE);
    }

    private Value(Name alias, Table<ValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Value(Name alias, Table<ValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ValueRecord, Integer> getIdentity() {
        return Keys.IDENTITY_VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ValueRecord> getPrimaryKey() {
        return Keys.VALUE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ValueRecord>> getKeys() {
        return Arrays.<UniqueKey<ValueRecord>>asList(Keys.VALUE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Value as(String alias) {
        return new Value(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Value as(Name alias) {
        return new Value(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Value rename(String name) {
        return new Value(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Value rename(Name name) {
        return new Value(name, null);
    }
}
