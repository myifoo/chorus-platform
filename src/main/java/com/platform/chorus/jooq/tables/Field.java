/*
 * This file is generated by jOOQ.
*/
package com.platform.chorus.jooq.tables;


import com.platform.chorus.jooq.Keys;
import com.platform.chorus.jooq.Public;
import com.platform.chorus.jooq.tables.records.FieldRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Field extends TableImpl<FieldRecord> {

    private static final long serialVersionUID = 1060389781;

    /**
     * The reference instance of <code>public.field</code>
     */
    public static final Field FIELD = new Field();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldRecord> getRecordType() {
        return FieldRecord.class;
    }

    /**
     * The column <code>public.field.id</code>.
     */
    public final TableField<FieldRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('field_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.field.owner</code>.
     */
    public final TableField<FieldRecord, String> OWNER = createField("owner", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.field.name</code>.
     */
    public final TableField<FieldRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.field.type</code>.
     */
    public final TableField<FieldRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.field.label</code>.
     */
    public final TableField<FieldRecord, String> LABEL = createField("label", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.field.collector</code>.
     */
    public final TableField<FieldRecord, String> COLLECTOR = createField("collector", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.field.relation</code>.
     */
    public final TableField<FieldRecord, String> RELATION = createField("relation", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.field.constraints</code>.
     */
    public final TableField<FieldRecord, String> CONSTRAINTS = createField("constraints", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.field.description</code>.
     */
    public final TableField<FieldRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.field</code> table reference
     */
    public Field() {
        this(DSL.name("field"), null);
    }

    /**
     * Create an aliased <code>public.field</code> table reference
     */
    public Field(String alias) {
        this(DSL.name(alias), FIELD);
    }

    /**
     * Create an aliased <code>public.field</code> table reference
     */
    public Field(Name alias) {
        this(alias, FIELD);
    }

    private Field(Name alias, Table<FieldRecord> aliased) {
        this(alias, aliased, null);
    }

    private Field(Name alias, Table<FieldRecord> aliased, org.jooq.Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FieldRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FIELD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FieldRecord> getPrimaryKey() {
        return Keys.FIELD_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FieldRecord>> getKeys() {
        return Arrays.<UniqueKey<FieldRecord>>asList(Keys.FIELD_PKEY, Keys.FM_U_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field as(String alias) {
        return new Field(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field as(Name alias) {
        return new Field(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Field rename(String name) {
        return new Field(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Field rename(Name name) {
        return new Field(name, null);
    }
}
